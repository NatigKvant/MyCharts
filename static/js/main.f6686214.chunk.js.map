{"version":3,"sources":["Components/DrowDown/Checkbox.js","Components/DrowDown/DropDown.js","Components/Table/Table.js","App.js","reportWebVitals.js","index.js"],"names":["Checkbox","row","updateVisible","index","useState","visible","setVisible","useEffect","type","checked","onChange","e","target","DropDown","rows","settingsMenuOpen","setSettingsMenuOpen","className","onClick","stopPropagation","map","name","Table","chartOptions","rate","setRate","fetch","then","response","json","data","quotes","USDRUB","catch","error","console","colSpan","highcharts","Highcharts","options","constructorType","num","OverlayTrigger","trigger","overlay","Popover","id","Header","as","Body","toFixed","difference","Math","round","App","HC_exporting","getData","setRows","chart","margin","backgroundColor","accessibility","enabled","events","click","x","xAxis","value","y","yAxis","this","series","addPoint","title","text","subtitle","gridLineWidth","maxPadding","legend","layout","align","verticalAlign","itemWidth","plotOptions","lineWidth","label","connectorAllowed","pointStart","point","length","remove","credits","oldRows","JSON","parse","stringify","heading","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f6686214.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport './DrowDown.css'\n\nconst Checkbox = ({ row, updateVisible, index }) => {\n\n    const [visible, setVisible] = useState(row.visible)\n\n    useEffect(() => {\n        updateVisible(visible, index)\n    }, [visible])\n\n    return (\n        <input\n            type='checkbox'\n            checked={visible}\n            onChange={(e) => setVisible(e.target.checked)}\n        />\n    )\n}\n\n\nexport default Checkbox\n","import React, { useState } from 'react'\nimport './DrowDown.css'\nimport SettingsIcon from '@material-ui/icons/Settings'\nimport Checkbox from './Checkbox'\n\nconst DropDown = ({ rows, updateVisible }) => {\n    const [settingsMenuOpen, setSettingsMenuOpen] = useState(false)\n\n    return (\n        <div className='settings'>\n            <SettingsIcon className='button' onClick={() => setSettingsMenuOpen(!settingsMenuOpen)}/>\n            <div className={`settings__menu ${settingsMenuOpen ? 'active' : ''}`}\n                 onClick={() => setSettingsMenuOpen(false)}>\n\n                <div onClick={e => e.stopPropagation()}>\n\n                    <ul>\n                        {rows.map((row, index) =>\n                            <li key={index}>\n                                <label>\n                                    <Checkbox row={row} key={index} index={index} updateVisible={updateVisible} /> {row.name}\n                                </label>\n                            </li>)\n                        }\n                    </ul>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default DropDown\n","import React, {useState, useEffect} from 'react'\nimport HighchartsReact from \"highcharts-react-official\";\nimport Highcharts from \"highcharts/highstock\";\nimport './Table.css'\nimport {OverlayTrigger, Popover} from \"react-bootstrap\";\n\n\nconst Table = ({rows, chartOptions}) => {\n\n    const [rate, setRate] = useState(0)\n\n    fetch('http://apilayer.net/api/live?access_key=7f45ab6dac83bacf3248ce4d8fed22e1&currencies=RUB&source=USD&format=1')\n        .then((response) => {\n            return response.json()\n        })\n        .then((data) => {\n            setRate(data.quotes.USDRUB)\n        })\n        .catch((error) => {\n            console.error(error)\n        })\n\n    return (\n        <>\n            <tbody>\n            {rows.map((row, index) => {\n                    return <>\n                        {index === 1 &&\n                        <tr>\n                            <td colSpan='4'>\n                                <HighchartsReact\n                                    className='charts'\n                                    highcharts={Highcharts}\n                                    options={chartOptions}\n                                    constructorType={'chart'}\n                                />\n                            </td>\n                        </tr>\n                        }\n                        {row.visible &&\n                        <tr key={index}>\n                            <td>\n                                {row.name}\n                            </td>\n                            {\n                                row.data.map((num, index) => {\n                                    switch (index) {\n                                        case 0:\n                                            return <td className='table-value' key={index}>\n                                                <div className='number'>{num}</div>\n\n                                                {row.name === 'Наличные' && !!rate && <OverlayTrigger\n                                                    trigger='hover'\n                                                    overlay={\n                                                        <Popover id=\"popover-basic\">\n                                                            <Popover.Header as=\"h3\">Converted in\n                                                                Dollars</Popover.Header>\n                                                            <Popover.Body>\n                                                                <strong>\n                                                                    ${(num / rate).toFixed(2)}\n                                                                </strong>\n                                                            </Popover.Body>\n                                                        </Popover>\n                                                    }\n                                                >\n                                                    <div className='rate'/>\n                                                </OverlayTrigger>}\n                                            </td>\n\n                                        case 1:\n                                            const difference = Math.round((1 - row.data[1] / row.data[0]) * 100)\n                                            return <td\n                                                className={difference <= -10 ? 'red' : difference >= 10 ? 'green' : ''}\n                                                key={index}\n                                            >\n                                                <div className='number'>{num}</div>\n                                                {!!difference && <div\n                                                    className={`difference ${difference < 0 ? 'red' : 'green'}`}>{difference}%</div>}\n                                            </td>\n                                        default:\n                                            return <td key={index}>\n                                                <div className='number'>{num}</div>\n                                            </td>\n                                    }\n                                })\n                            }\n                        </tr>\n                        }\n                    </>\n                }\n            )}\n            </tbody>\n        </>\n    )\n}\n\nexport default Table","import React, {useEffect, useState} from 'react'\nimport Highcharts from 'highcharts/highstock'\nimport HC_exporting from 'highcharts/modules/exporting'\nimport './App.css'\nimport DropDown from './Components/DrowDown/DropDown'\nimport data from './data.json'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Table from \"./Components/Table/Table\";\n\nfunction getData() {\n    for (const item of data) {\n        item.visible = true\n    }\n    return data\n}\n\nconst App = () => {\n\n    HC_exporting(Highcharts)\n\n    const [rows, setRows] = useState(() => getData())\n\n    const [chartOptions] = useState({\n        chart: {\n            type: 'scatter',\n            margin: [70, 50, 60, 80],\n            backgroundColor: 'whitesmoke',\n            accessibility: {\n                enabled: true\n            },\n            events: {\n                click: function (e) {\n\n                    const x = Math.round(e.xAxis[0].value),\n                        y = Math.round(e.yAxis[0].value),\n                        series = this.series[0]\n\n                    series.addPoint([x, y])\n                }\n            },\n\n        },\n        title: {\n            text: ''\n        },\n        subtitle: {\n            text: ''\n        },\n        xAxis: {\n            gridLineWidth: 1,\n            maxPadding: 0.2,\n        },\n        yAxis: {},\n        legend: {\n            enabled: false,\n            layout: 'horizontal',\n            align: 'right',\n            verticalAlign: 'bottom',\n            className: 'charts',\n            itemWidth: 140,\n            y: 0,\n\n        },\n        plotOptions: {\n            series: {\n                lineWidth: 1,\n                label: {\n                    connectorAllowed: false\n                },\n                pointStart: 1,\n                point: {\n                    events: {\n                        click: function () {\n                            if (this.series.data.length > 1) {\n                                this.remove()\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        series: rows,\n        credits: {\n            enabled: false\n        },\n    })\n\n    const headings = [\n        {value: 'Показатель'},\n        {value: 'Текущий день'},\n        {value: 'Вчера'},\n        {value: 'Этот день недели'}\n    ]\n\n    const updateVisible = (visible, index) => {\n        setRows((oldRows) => {\n            oldRows[index].visible = visible\n            return JSON.parse(JSON.stringify(oldRows))\n        })\n    }\n\n    return (\n        <div className='App'>\n            <table className='table'>\n                <thead>\n                <tr>\n                    <th className='main-header' colSpan='4'>\n                        Общая Статистика\n                        <DropDown rows={rows} updateVisible={updateVisible}/>\n                    </th>\n                </tr>\n                <tr className='heading'>\n                    {headings.map((heading) =>\n                        <th>{heading.value}</th>\n                    )}\n                </tr>\n                </thead>\n                <Table rows={rows} chartOptions={chartOptions}/>\n            </table>\n        </div>\n    )\n}\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}